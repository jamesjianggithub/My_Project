{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_5_PAEsRWiLJ"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "from pandas import DataFrame, Series\n",
    "from time import strftime\n",
    "import seaborn as sns\n",
    "import datetime\n",
    "import sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Nl-9vxUzd09Z"
   },
   "outputs": [],
   "source": [
    "#Read in .csv (trag the csv format dataset into local file, follow )\n",
    "shots = pd.read_csv(\"shot_logs.csv\")\n",
    "playoffs = pd.read_csv(\"nba_playoff_teams_2015.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "u48zrWf_EAbl"
   },
   "outputs": [],
   "source": [
    "#from google.colab import drive\n",
    "#drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "09Aw42Ko0BAz"
   },
   "outputs": [],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Mer8WCIKG2CG"
   },
   "outputs": [],
   "source": [
    "#Read in .csv using google drive\n",
    "#shots = pd.read_csv(\"/content/drive/My Drive/shot_logs.csv\")\n",
    "#playoffs = pd.read_csv(\"/content/drive/My Drive/nba_playoff_teams_2015.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 479
    },
    "colab_type": "code",
    "id": "_owIL4ejeJG_",
    "outputId": "a904d6ab-03ae-4599-c0d0-5455f455bdf7"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_ID</th>\n",
       "      <th>MATCHUP</th>\n",
       "      <th>LOCATION</th>\n",
       "      <th>W</th>\n",
       "      <th>FINAL_MARGIN</th>\n",
       "      <th>SHOT_NUMBER</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>GAME_CLOCK</th>\n",
       "      <th>SHOT_CLOCK</th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>TOUCH_TIME</th>\n",
       "      <th>SHOT_DIST</th>\n",
       "      <th>PTS_TYPE</th>\n",
       "      <th>SHOT_RESULT</th>\n",
       "      <th>CLOSEST_DEFENDER</th>\n",
       "      <th>CLOSEST_DEFENDER_PLAYER_ID</th>\n",
       "      <th>CLOSE_DEF_DIST</th>\n",
       "      <th>FGM</th>\n",
       "      <th>PTS</th>\n",
       "      <th>player_name</th>\n",
       "      <th>player_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1:09</td>\n",
       "      <td>10.8</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2</td>\n",
       "      <td>made</td>\n",
       "      <td>Anderson, Alan</td>\n",
       "      <td>101187</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0:14</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>28.2</td>\n",
       "      <td>3</td>\n",
       "      <td>missed</td>\n",
       "      <td>Bogdanovic, Bojan</td>\n",
       "      <td>202711</td>\n",
       "      <td>6.1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>2.7</td>\n",
       "      <td>10.1</td>\n",
       "      <td>2</td>\n",
       "      <td>missed</td>\n",
       "      <td>Bogdanovic, Bojan</td>\n",
       "      <td>202711</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>24</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>11:47</td>\n",
       "      <td>10.3</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17.2</td>\n",
       "      <td>2</td>\n",
       "      <td>missed</td>\n",
       "      <td>Brown, Markel</td>\n",
       "      <td>203900</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>24</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>10:34</td>\n",
       "      <td>10.9</td>\n",
       "      <td>2</td>\n",
       "      <td>2.7</td>\n",
       "      <td>3.7</td>\n",
       "      <td>2</td>\n",
       "      <td>missed</td>\n",
       "      <td>Young, Thaddeus</td>\n",
       "      <td>201152</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    GAME_ID                   MATCHUP LOCATION  ... PTS    player_name  player_id\n",
       "0  21400899  MAR 04, 2015 - CHA @ BKN        A  ...   2  brian roberts     203148\n",
       "1  21400899  MAR 04, 2015 - CHA @ BKN        A  ...   0  brian roberts     203148\n",
       "2  21400899  MAR 04, 2015 - CHA @ BKN        A  ...   0  brian roberts     203148\n",
       "3  21400899  MAR 04, 2015 - CHA @ BKN        A  ...   0  brian roberts     203148\n",
       "4  21400899  MAR 04, 2015 - CHA @ BKN        A  ...   0  brian roberts     203148\n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display top 5 rows of shots\n",
    "shots.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Ewq5cPWZeOtb",
    "outputId": "70e4637d-d467-4aca-9c87-9116c78ba294"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(128069, 21)"
      ]
     },
     "execution_count": 4,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display shots dimensions\n",
    "shots.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JejfYXPothZ9"
   },
   "outputs": [],
   "source": [
    "shots.drop(['LOCATION','FINAL_MARGIN', 'SHOT_RESULT', \n",
    "            'CLOSEST_DEFENDER','CLOSEST_DEFENDER_PLAYER_ID',\n",
    "            'PTS'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 479
    },
    "colab_type": "code",
    "id": "-zYPmqlOvQbS",
    "outputId": "10f42967-57fd-43f5-a229-739e1b556da8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_ID</th>\n",
       "      <th>MATCHUP</th>\n",
       "      <th>W</th>\n",
       "      <th>SHOT_NUMBER</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>GAME_CLOCK</th>\n",
       "      <th>SHOT_CLOCK</th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>TOUCH_TIME</th>\n",
       "      <th>SHOT_DIST</th>\n",
       "      <th>PTS_TYPE</th>\n",
       "      <th>CLOSE_DEF_DIST</th>\n",
       "      <th>FGM</th>\n",
       "      <th>player_name</th>\n",
       "      <th>player_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>W</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1:09</td>\n",
       "      <td>10.8</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>W</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0:14</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>28.2</td>\n",
       "      <td>3</td>\n",
       "      <td>6.1</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>W</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>2.7</td>\n",
       "      <td>10.1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>W</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>11:47</td>\n",
       "      <td>10.3</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17.2</td>\n",
       "      <td>2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21400899</td>\n",
       "      <td>MAR 04, 2015 - CHA @ BKN</td>\n",
       "      <td>W</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>10:34</td>\n",
       "      <td>10.9</td>\n",
       "      <td>2</td>\n",
       "      <td>2.7</td>\n",
       "      <td>3.7</td>\n",
       "      <td>2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    GAME_ID                   MATCHUP  W  ...  FGM    player_name player_id\n",
       "0  21400899  MAR 04, 2015 - CHA @ BKN  W  ...    1  brian roberts    203148\n",
       "1  21400899  MAR 04, 2015 - CHA @ BKN  W  ...    0  brian roberts    203148\n",
       "2  21400899  MAR 04, 2015 - CHA @ BKN  W  ...    0  brian roberts    203148\n",
       "3  21400899  MAR 04, 2015 - CHA @ BKN  W  ...    0  brian roberts    203148\n",
       "4  21400899  MAR 04, 2015 - CHA @ BKN  W  ...    0  brian roberts    203148\n",
       "\n",
       "[5 rows x 15 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shots.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 289
    },
    "colab_type": "code",
    "id": "im46McA3vadH",
    "outputId": "d95d07ec-134e-4f47-97df-32b48152d623"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GAME_ID             int64\n",
       "MATCHUP            object\n",
       "W                  object\n",
       "SHOT_NUMBER         int64\n",
       "PERIOD              int64\n",
       "GAME_CLOCK         object\n",
       "SHOT_CLOCK        float64\n",
       "DRIBBLES            int64\n",
       "TOUCH_TIME        float64\n",
       "SHOT_DIST         float64\n",
       "PTS_TYPE            int64\n",
       "CLOSE_DEF_DIST    float64\n",
       "FGM                 int64\n",
       "player_name        object\n",
       "player_id           int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#List of all variables and data types of shots\n",
    "shots.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 317
    },
    "colab_type": "code",
    "id": "2ajYG0WYwSR8",
    "outputId": "4ac604f4-e6d6-4178-d98d-819c264d8159"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_ID</th>\n",
       "      <th>SHOT_NUMBER</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>SHOT_CLOCK</th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>TOUCH_TIME</th>\n",
       "      <th>SHOT_DIST</th>\n",
       "      <th>PTS_TYPE</th>\n",
       "      <th>CLOSE_DEF_DIST</th>\n",
       "      <th>FGM</th>\n",
       "      <th>player_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.280690e+05</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>122502.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "      <td>128069.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.140045e+07</td>\n",
       "      <td>6.506899</td>\n",
       "      <td>2.469427</td>\n",
       "      <td>12.453344</td>\n",
       "      <td>2.023355</td>\n",
       "      <td>2.765901</td>\n",
       "      <td>13.571504</td>\n",
       "      <td>2.264670</td>\n",
       "      <td>4.123015</td>\n",
       "      <td>0.452139</td>\n",
       "      <td>157238.251247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.578773e+02</td>\n",
       "      <td>4.713260</td>\n",
       "      <td>1.139919</td>\n",
       "      <td>5.763265</td>\n",
       "      <td>3.477760</td>\n",
       "      <td>3.043682</td>\n",
       "      <td>8.888964</td>\n",
       "      <td>0.441159</td>\n",
       "      <td>2.756446</td>\n",
       "      <td>0.497706</td>\n",
       "      <td>79362.389336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.140000e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-163.600000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>708.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.140023e+07</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>101162.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.140045e+07</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>12.300000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>13.700000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>201939.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.140067e+07</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>16.675000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>22.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.300000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>202704.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.140091e+07</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>24.900000</td>\n",
       "      <td>47.200000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>53.200000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>204060.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            GAME_ID    SHOT_NUMBER  ...            FGM      player_id\n",
       "count  1.280690e+05  128069.000000  ...  128069.000000  128069.000000\n",
       "mean   2.140045e+07       6.506899  ...       0.452139  157238.251247\n",
       "std    2.578773e+02       4.713260  ...       0.497706   79362.389336\n",
       "min    2.140000e+07       1.000000  ...       0.000000     708.000000\n",
       "25%    2.140023e+07       3.000000  ...       0.000000  101162.000000\n",
       "50%    2.140045e+07       5.000000  ...       0.000000  201939.000000\n",
       "75%    2.140067e+07       9.000000  ...       1.000000  202704.000000\n",
       "max    2.140091e+07      38.000000  ...       1.000000  204060.000000\n",
       "\n",
       "[8 rows x 11 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Descriptive statistics of shot data numeric variables\n",
    "shots.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 289
    },
    "colab_type": "code",
    "id": "glwvk1EBwWif",
    "outputId": "71f7f283-e83e-461a-f7c1-f49d2d41832c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GAME_ID              0\n",
       "MATCHUP              0\n",
       "W                    0\n",
       "SHOT_NUMBER          0\n",
       "PERIOD               0\n",
       "GAME_CLOCK           0\n",
       "SHOT_CLOCK        5567\n",
       "DRIBBLES             0\n",
       "TOUCH_TIME           0\n",
       "SHOT_DIST            0\n",
       "PTS_TYPE             0\n",
       "CLOSE_DEF_DIST       0\n",
       "FGM                  0\n",
       "player_name          0\n",
       "player_id            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for missing data\n",
    "shots.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6kCAJmuBws_a"
   },
   "outputs": [],
   "source": [
    "#Create a list of numeric variables to plot in order to see the distribution\n",
    "num_var_list = ['SHOT_NUMBER','PERIOD','SHOT_CLOCK','DRIBBLES','TOUCH_TIME','SHOT_DIST','PTS_TYPE','CLOSE_DEF_DIST','FGM']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "845XsBENygj9",
    "outputId": "e4eff83b-0f91-440a-8637-06ecf7702022"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nkoRhIEkC/j9v1M1SBPsSOAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYEAAAEICAYAAAC55kg0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAWXklEQVR4nO3df7BfdX3n8edLlLqLP0ggm2WT2NCa\n1sHOqDQL2NKulRoCdhq2qwxMp0aGmTgO7uqu0xrdnUFBdrG7LepOZSaVbIOjYqp1ySojZtH+sF1+\nBKUooE2kIMkGciWIIlsd9L1/fD9Xv6b3cr/fm3tzk/t5Pma+8z3ncz7n3M8nX7iv+/mc8z0nVYUk\nqU/PWOgGSJIWjiEgSR0zBCSpY4aAJHXMEJCkjhkCktQxQ0CSOmYISFLHDAEd9ZKcneRvkjye5GCS\nv07yL5O8PskXpqj/QJJfH1pfmeTDSR5N8t0ktyf5jbbtBUmeGHpVqzO5/isztO2MJDcl+VZr2+1J\nLmnbXpFk79Ps+0tJPpfkO61v/yvJaYfUeV6S9yb5RmvP19v6ydP09aIkjyX5V6P++6pvhoCOakme\nB3wK+O/AUmAF8C7geyPuvxT4AvB94MXAycA1wEeSvKaqvlFVz5l8td1eMlT2V09z7JcDnwP+Angh\ncBLwRuC8Edr1cuCzwI3AvwBOBf4W+OskP9PqHA/c0tq9Hnge8HLgUeCMKY65Efgj4NVV9RcztUEC\neOZCN0Cawc8BVNVH2/r/Y/DLkySnj7D/vweeAC6tqh+2so8meQHwB0k+UbO/d8p/BbZV1XuGyu4E\nLhxh398Hrq+q9w2V/ackvwi8E3hde70A+LWqeqLVOQBceejBkrwBuAo4t6p2jdsR9cuRgI52fwf8\nIMm2JOclWTLm/q8CPjEUAJO2M/gF+3OzaVSSf8rgr/KPz3LfXwL+dIrN2xm0GeDXgc8MBcB03ghc\nAZxjAGhchoCOalX1beBsoIA/BiaS7EiyvFU5q83H/+jF4Jf7pJOB/VMcev/Q9tlYwuD/n6mOPZOl\nT7Pv/qE2nTTi8V8F3Ap8eRZtUecMAR31quq+qnp9Va0EfoHBHPp72+Zbq+rE4RfwjaHdvwmcMsVh\nTxnaPhuPAT+c5tiHs+8pQ216dMTjv5HBiOaDSTKL9qhjhoCOKVX1VeBPGITBKP438FtJDv1v/ULg\n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\nLy/OARYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n26oAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\niibyCYpWAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for column in num_var_list:\n",
    "  plt.hist(shots[column], bins=30)\n",
    "  plt.title(column)\n",
    "  plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 170
    },
    "colab_type": "code",
    "id": "IjVWq9nlKucG",
    "outputId": "4554ae79-c906-4a4d-f6b8-f388c6efcbdf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    124711.000000\n",
       "mean          2.846596\n",
       "std           2.991336\n",
       "min           0.100000\n",
       "25%           0.900000\n",
       "50%           1.700000\n",
       "75%           3.800000\n",
       "max          24.900000\n",
       "Name: TOUCH_TIME, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Removing rows with touch time < 0\n",
    "shots = shots[shots.TOUCH_TIME > 0]\n",
    "shots['TOUCH_TIME'].describe()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 289
    },
    "colab_type": "code",
    "id": "4roCe6D8NEDo",
    "outputId": "08918491-9f40-4298-fe7c-07aed5593f5e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GAME_ID           0\n",
       "MATCHUP           0\n",
       "W                 0\n",
       "SHOT_NUMBER       0\n",
       "PERIOD            0\n",
       "GAME_CLOCK        0\n",
       "SHOT_CLOCK        0\n",
       "DRIBBLES          0\n",
       "TOUCH_TIME        0\n",
       "SHOT_DIST         0\n",
       "PTS_TYPE          0\n",
       "CLOSE_DEF_DIST    0\n",
       "FGM               0\n",
       "player_name       0\n",
       "player_id         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Editing shot clock values that are missing\n",
    "shots['SHOT_CLOCK'] = shots['SHOT_CLOCK'].fillna(shots['GAME_CLOCK'])\n",
    "#Check for missing data\n",
    "shots.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YhjmAJHIznW2"
   },
   "outputs": [],
   "source": [
    "#Convert \"GAME_CLOCK\" variable to minute:second time data type\n",
    "shots['GAME_CLOCK']=pd.to_datetime(shots['GAME_CLOCK'],format='%m:%s',errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MKPideHWlgm5"
   },
   "outputs": [],
   "source": [
    "#To create a variable for the team the player is on, we need to split the \"MATCHUP\" column twice to remove the date of the game\n",
    "#and remove the opposing team.  By splitting and removing whitespace we will add a new column called \"Team\" that will be used\n",
    "#in an SQL join to link the shots table with a table providing information on making the playoffs.\n",
    "shots[['Date', 'Teams']] = shots['MATCHUP'].str.split('-', 1, expand = True)\n",
    "shots.drop(['MATCHUP', 'Date'], axis = 1, inplace = True)\n",
    "shots['Teams'] = shots['Teams'].str.strip()\n",
    "shots[['Team', 'Opposing_Team']] = shots['Teams'].str.split(' ', 1, expand = True)\n",
    "shots.drop(['Teams', 'Opposing_Team'], axis = 1, inplace = True)\n",
    "shots['Team'] = shots['Team'].str.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 224
    },
    "colab_type": "code",
    "id": "iiPGdFyLmpwE",
    "outputId": "4392e689-9840-42e2-84b5-6150dc63c8db"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_ID</th>\n",
       "      <th>W</th>\n",
       "      <th>SHOT_NUMBER</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>GAME_CLOCK</th>\n",
       "      <th>SHOT_CLOCK</th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>TOUCH_TIME</th>\n",
       "      <th>SHOT_DIST</th>\n",
       "      <th>PTS_TYPE</th>\n",
       "      <th>CLOSE_DEF_DIST</th>\n",
       "      <th>FGM</th>\n",
       "      <th>player_name</th>\n",
       "      <th>player_id</th>\n",
       "      <th>Team</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21400899</td>\n",
       "      <td>W</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1:09</td>\n",
       "      <td>10.8</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "      <td>CHA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21400899</td>\n",
       "      <td>W</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0:14</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>28.2</td>\n",
       "      <td>3</td>\n",
       "      <td>6.1</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "      <td>CHA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21400899</td>\n",
       "      <td>W</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0:00</td>\n",
       "      <td>0:00</td>\n",
       "      <td>3</td>\n",
       "      <td>2.7</td>\n",
       "      <td>10.1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "      <td>CHA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21400899</td>\n",
       "      <td>W</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>11:47</td>\n",
       "      <td>10.3</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17.2</td>\n",
       "      <td>2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "      <td>CHA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21400899</td>\n",
       "      <td>W</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>10:34</td>\n",
       "      <td>10.9</td>\n",
       "      <td>2</td>\n",
       "      <td>2.7</td>\n",
       "      <td>3.7</td>\n",
       "      <td>2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0</td>\n",
       "      <td>brian roberts</td>\n",
       "      <td>203148</td>\n",
       "      <td>CHA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    GAME_ID  W  SHOT_NUMBER  PERIOD  ... FGM    player_name  player_id  Team\n",
       "0  21400899  W            1       1  ...   1  brian roberts     203148   CHA\n",
       "1  21400899  W            2       1  ...   0  brian roberts     203148   CHA\n",
       "2  21400899  W            3       1  ...   0  brian roberts     203148   CHA\n",
       "3  21400899  W            4       2  ...   0  brian roberts     203148   CHA\n",
       "4  21400899  W            5       2  ...   0  brian roberts     203148   CHA\n",
       "\n",
       "[5 rows x 15 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shots.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 979
    },
    "colab_type": "code",
    "id": "jXQr8rHrJ4ug",
    "outputId": "15e52e2a-f80c-4b69-d826-a9a395575cad"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>made_playoffs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ATL</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BKN</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BOS</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CHA</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CHI</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CLE</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>DAL</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>DEN</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DET</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>GSW</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>HOU</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>IND</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LAC</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>LAL</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>MEM</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MIA</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>MIL</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>MIN</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>NOP</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>NYK</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>OKC</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>ORL</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>PHI</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>PHX</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>POR</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>SAC</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>SAS</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>TOR</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>UTA</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>WAS</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   team made_playoffs\n",
       "0   ATL           Yes\n",
       "1   BKN           Yes\n",
       "2   BOS           Yes\n",
       "3   CHA            No\n",
       "4   CHI           Yes\n",
       "5   CLE           Yes\n",
       "6   DAL           Yes\n",
       "7   DEN            No\n",
       "8   DET            No\n",
       "9   GSW           Yes\n",
       "10  HOU           Yes\n",
       "11  IND            No\n",
       "12  LAC           Yes\n",
       "13  LAL            No\n",
       "14  MEM           Yes\n",
       "15  MIA            No\n",
       "16  MIL           Yes\n",
       "17  MIN            No\n",
       "18  NOP           Yes\n",
       "19  NYK            No\n",
       "20  OKC            No\n",
       "21  ORL            No\n",
       "22  PHI            No\n",
       "23  PHX            No\n",
       "24  POR           Yes\n",
       "25  SAC            No\n",
       "26  SAS           Yes\n",
       "27  TOR           Yes\n",
       "28  UTA            No\n",
       "29  WAS           Yes"
      ]
     },
     "execution_count": 17,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#View playoffs df\n",
    "playoffs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "70lZlG4rwI4D"
   },
   "source": [
    "Create two SQL tables to store the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "JSHD0YDdwUXc",
    "outputId": "bfd1f1c7-f4df-410f-92b5-aa8e218b2d98"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlite3.Connection object at 0x7f4e1a3ce730>\n"
     ]
    }
   ],
   "source": [
    "#Open database connection\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "print(conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "z3OIO_XvzhFS",
    "outputId": "604e99a5-bdc2-4414-f4b4-e87716001691"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table dropped\n"
     ]
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS `Shots_Table`\")\n",
    "print(\"Table dropped\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 289
    },
    "colab_type": "code",
    "id": "a-TKDWPJzozh",
    "outputId": "45b60c99-14ed-46f4-ef5f-141d0ee46fbb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GAME_ID             int64\n",
       "W                  object\n",
       "SHOT_NUMBER         int64\n",
       "PERIOD              int64\n",
       "GAME_CLOCK         object\n",
       "SHOT_CLOCK         object\n",
       "DRIBBLES            int64\n",
       "TOUCH_TIME        float64\n",
       "SHOT_DIST         float64\n",
       "PTS_TYPE            int64\n",
       "CLOSE_DEF_DIST    float64\n",
       "FGM                 int64\n",
       "player_name        object\n",
       "player_id           int64\n",
       "Team               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shots.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "6v6cdZWbztRr",
    "outputId": "ba0bc136-b9dc-47c1-fc31-da331512922e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table created successfully\n"
     ]
    }
   ],
   "source": [
    "#Create an SQL table to store shots data\n",
    "try:\n",
    "    conn.execute('''CREATE TABLE Shots_Table\n",
    "       (GAME_ID                                  INTEGER  NOT NULL,\n",
    "        W                                        TEXT,\n",
    "        SHOT_NUMBER                              INTEGER  NOT NULL,\n",
    "        PERIOD                                   INTEGER,\n",
    "        GAME_CLOCK                               TEXT,\n",
    "        SHOT_CLOCK                               FLOAT,\n",
    "        DRIBBLES                                 INTEGER,\n",
    "        TOUCH_TIME                               FLOAT,\n",
    "        SHOT_DIST                                FLOAT,\n",
    "        PTS_TYPE                                 INTEGER,\n",
    "        CLOSE_DEF_DIST                           FLOAT,\n",
    "        FGM                                      INTEGER,\n",
    "        PLAYER_NAME                              TEXT,\n",
    "        PLAYER_ID                                INTEGER  NOT NULL,\n",
    "        TEAM                                     TEXT,\n",
    "        PRIMARY KEY (GAME_ID, PLAYER_ID, SHOT_NUMBER));''')\n",
    "    print(\"Table created successfully\")\n",
    "except Exception as e:\n",
    "    print(str(e))\n",
    "    print('Table creation failed!')\n",
    "finally:\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dLlG_E92-oZM"
   },
   "outputs": [],
   "source": [
    "#null_counts = shots.isnull().sum()\n",
    "#null_counts[null_counts > 0].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "_ch_wp6WHZz1",
    "outputId": "29edcc9f-1d10-4348-ed80-986a88a84d1c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Inserted successfully\n"
     ]
    }
   ],
   "source": [
    "#Create a list of variables from shots df and insert into sql table\n",
    "shots_list = shots.values.tolist()\n",
    "\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "\n",
    "cursor = conn.cursor()\n",
    "\n",
    "try:\n",
    "    cursor.executemany('''\n",
    "      INSERT INTO Shots_Table (\n",
    "          GAME_ID,\n",
    "          W,\n",
    "          SHOT_NUMBER,\n",
    "          PERIOD,\n",
    "          GAME_CLOCK,\n",
    "          SHOT_CLOCK,\n",
    "          DRIBBLES,\n",
    "          TOUCH_TIME,\n",
    "          SHOT_DIST,\n",
    "          PTS_TYPE,\n",
    "          CLOSE_DEF_DIST,\n",
    "          FGM,\n",
    "          PLAYER_NAME,\n",
    "          PLAYER_ID,\n",
    "          TEAM)\n",
    "      VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)''', shots_list)\n",
    "    conn.commit()\n",
    "    print(\"Data Inserted successfully\")\n",
    "except Exception as e:\n",
    "    print(str(e))\n",
    "    print(\"Insertion failed!\")\n",
    "finally:\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "YBhQWdRTJY4n",
    "outputId": "f9201748-437e-4f9a-c9b1-4b22c6a6cfb7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124711,)\n"
     ]
    }
   ],
   "source": [
    "#Print the number of rows in the Shots_Table\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "cursor = conn.cursor()\n",
    "cursor.execute(\"SELECT count(*) FROM Shots_Table;\")\n",
    "rows = cursor.fetchall()\n",
    "for row in rows:\n",
    "    print(row)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "i2PXlpcIKUqd",
    "outputId": "e42d343d-10a1-4ebe-aa8d-c22b05ecb772"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlite3.Connection object at 0x7f4e1a3ce730>\n"
     ]
    }
   ],
   "source": [
    "#Open database connection\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "print(conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "BGSsoBrtJiVB",
    "outputId": "6b89e0d7-c0bb-4397-8c9b-4bdcbc7ad3ed"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table dropped\n"
     ]
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS `Playoffs_Table`\")\n",
    "print(\"Table dropped\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "dHSEdwjDKiT_",
    "outputId": "f331aff5-ca2c-4c30-cd5f-1f3c1377d521"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "team             object\n",
       "made_playoffs    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "playoffs.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ML0b9c5jKnaA",
    "outputId": "60dc3bfd-ccba-4ca3-d8ab-1c4967b26a15"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table created successfully\n"
     ]
    }
   ],
   "source": [
    "#Create an SQL table to store playoff team data\n",
    "try:\n",
    "    conn.execute('''CREATE TABLE Playoffs_Table\n",
    "       (TEAM                                TEXT  PRIMARY KEY,\n",
    "        PLAYOFFS                            TEXT);''')\n",
    "    print(\"Table created successfully\")\n",
    "except Exception as e:\n",
    "    print(str(e))\n",
    "    print('Table creation failed!')\n",
    "finally:\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "7OCaMwrgLICj",
    "outputId": "5dbc123e-178f-46ba-f20b-481c179aec79"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Inserted successfully\n"
     ]
    }
   ],
   "source": [
    "#Create a list of variables from playoffs df and insert into sql table\n",
    "playoffs_list = playoffs.values.tolist()\n",
    "\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "\n",
    "cursor = conn.cursor()\n",
    "\n",
    "try:\n",
    "    cursor.executemany('''\n",
    "      INSERT INTO Playoffs_Table (\n",
    "          TEAM,\n",
    "          PLAYOFFS)\n",
    "      VALUES (?,?)''', playoffs_list)\n",
    "    conn.commit()\n",
    "    print(\"Data Inserted successfully\")\n",
    "except Exception as e:\n",
    "    print(str(e))\n",
    "    print(\"Insertion failed!\")\n",
    "finally:\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "DHj2vEoNL1ov",
    "outputId": "f88521cd-096c-4b63-c000-115cd2e57c5d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(30,)\n"
     ]
    }
   ],
   "source": [
    "#Print the number of rows in the Playoffs_Table\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "cursor = conn.cursor()\n",
    "cursor.execute(\"SELECT count(*) FROM Playoffs_Table;\")\n",
    "rows = cursor.fetchall()\n",
    "for row in rows:\n",
    "    print(row)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "lJtGxdtcnV1X",
    "outputId": "12d04baf-c53b-4312-8958-a5464d8717af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlite3.Connection object at 0x7f4dea0651f0>\n",
      "Table dropped\n"
     ]
    }
   ],
   "source": [
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "print(conn)\n",
    "conn.execute(\"DROP TABLE IF EXISTS `combined_df`\")\n",
    "print(\"Table dropped\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Ww6Jg9x3Up2b",
    "outputId": "848da115-de03-414b-8fbb-689476e0f9fb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'NoneType' object is not iterable\n"
     ]
    }
   ],
   "source": [
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "\n",
    "try:\n",
    "  combined_df = pd.read_sql_query('''\n",
    "        CREATE TABLE combined_df as\n",
    "        SELECT *\n",
    "        FROM Shots_Table as a\n",
    "        JOIN Playoffs_Table as b\n",
    "        ON a.TEAM=b.TEAM;''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "h5yMLkeQeM10",
    "outputId": "37fc8f2b-1b8e-4ad3-99f5-37ab0b20acd7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124711,)\n"
     ]
    }
   ],
   "source": [
    "#Print the number of rows in the combined_df table\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "cursor = conn.cursor()\n",
    "cursor.execute(\"SELECT count(*) FROM combined_df;\")\n",
    "rows = cursor.fetchall()\n",
    "for row in rows:\n",
    "    print(row)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "0GzmyBb8Wp57",
    "outputId": "e5f5ba82-8d17-4eb8-e05d-418ae8b0d0b6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_ID</th>\n",
       "      <th>W</th>\n",
       "      <th>total_shots_made</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21400001</td>\n",
       "      <td>L</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21400001</td>\n",
       "      <td>W</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21400002</td>\n",
       "      <td>L</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21400002</td>\n",
       "      <td>W</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21400003</td>\n",
       "      <td>L</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    GAME_ID  W  total_shots_made\n",
       "0  21400001  L                27\n",
       "1  21400001  W                34\n",
       "2  21400002  L                31\n",
       "3  21400002  W                37\n",
       "4  21400003  L                25"
      ]
     },
     "execution_count": 34,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To find the average number of shots made per game based on win or loss in \"W\" column (group by, average)\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "      SELECT GAME_ID, W, SUM(FGM) AS total_shots_made \n",
    "      FROM combined_df \n",
    "      GROUP BY GAME_ID, W''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 420
    },
    "colab_type": "code",
    "id": "GXqwRoFZBY3a",
    "outputId": "f294eb50-34a6-4b9c-d365-1b7b62b4733f"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nHhLNErOeAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make a boxplot graph using pandas\n",
    "df.boxplot(column = 'total_shots_made', by = 'W', figsize = (8,6))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZeiLGpTLYoYU"
   },
   "source": [
    "The average number of shots made in a win was 33.2 and average shots made in a loss was 29.1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 111
    },
    "colab_type": "code",
    "id": "dSW4OpFdE_y5",
    "outputId": "2b37c74b-083b-467a-9483-5719115b1896"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PLAYOFFS</th>\n",
       "      <th>fg_percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>0.442278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Yes</td>\n",
       "      <td>0.459980</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  PLAYOFFS  fg_percentage\n",
       "0       No       0.442278\n",
       "1      Yes       0.459980"
      ]
     },
     "execution_count": 36,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To find the overall field goal percentage of teams making the playoffs vs teams not making the playoffs (group by, average)\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT PLAYOFFS, avg(FGM) AS fg_percentage \n",
    "  FROM combined_df \n",
    "  GROUP BY PLAYOFFS''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6F9l7d8mahCD"
   },
   "source": [
    "The overall field goal percentage of teams making the playoffs was 46.0% compared to the field goal percentage of teams not making the playoffs which was 44.2%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "KuS8Pv8YFyz-",
    "outputId": "c5d94bc8-ecf5-4525-abbe-76577d17fe21"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PLAYER_ID</th>\n",
       "      <th>PLAYER_NAME</th>\n",
       "      <th>TEAM</th>\n",
       "      <th>count(PLAYER_ID)</th>\n",
       "      <th>AVERAGE_FGM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202337</td>\n",
       "      <td>luke babbitt</td>\n",
       "      <td>NOP</td>\n",
       "      <td>102</td>\n",
       "      <td>0.509804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2594</td>\n",
       "      <td>kyle korver</td>\n",
       "      <td>ATL</td>\n",
       "      <td>354</td>\n",
       "      <td>0.497175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2225</td>\n",
       "      <td>tony parker</td>\n",
       "      <td>SAS</td>\n",
       "      <td>68</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>203932</td>\n",
       "      <td>aaron gordon</td>\n",
       "      <td>ORL</td>\n",
       "      <td>20</td>\n",
       "      <td>0.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202087</td>\n",
       "      <td>alonzo gee</td>\n",
       "      <td>DEN</td>\n",
       "      <td>25</td>\n",
       "      <td>0.440000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PLAYER_ID   PLAYER_NAME TEAM  count(PLAYER_ID)  AVERAGE_FGM\n",
       "0     202337  luke babbitt  NOP               102     0.509804\n",
       "1       2594   kyle korver  ATL               354     0.497175\n",
       "2       2225   tony parker  SAS                68     0.470588\n",
       "3     203932  aaron gordon  ORL                20     0.450000\n",
       "4     202087    alonzo gee  DEN                25     0.440000"
      ]
     },
     "execution_count": 37,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To find the top 3 players with the highest 3 point shooting percentage among all players that attempted at least 10 3 point shots.\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT PLAYER_ID, PLAYER_NAME, TEAM, count(PLAYER_ID), AVG(FGM) AS AVERAGE_FGM \n",
    "  FROM combined_df \n",
    "  WHERE PTS_TYPE = 3 \n",
    "  GROUP BY PLAYER_ID \n",
    "  HAVING COUNT(PLAYER_ID) >= 10 \n",
    "  ORDER BY AVERAGE_FGM DESC ''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "L9Bx4Rg7hQLv"
   },
   "source": [
    "The 3 players with the highest 3 point shooting percentage among players that attempted at least ten 3 point shots were Luke Babbit (NOP/51.0%), Kyle Korver (ATL/49.7%) and Tony Parker (SAS/47.1%)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 111
    },
    "colab_type": "code",
    "id": "WHKZMBUnHyG-",
    "outputId": "979ae035-8256-4cf1-ea28-b1c6b93df0b5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>average_dribbles</th>\n",
       "      <th>FGM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.188235</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.943661</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   average_dribbles  FGM\n",
       "0          2.188235    0\n",
       "1          1.943661    1"
      ]
     },
     "execution_count": 38,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The average number of dribbles when player missed or made the shot. (group by, average)\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT AVG(DRIBBLES) AS average_dribbles,FGM \n",
    "  FROM combined_df \n",
    "  GROUP BY FGM''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "iCvEkZcJD2mF",
    "outputId": "7e9adc2e-8f16-4d94-83d1-cddc594a75ef"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>FG_Pct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.472363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.454049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.424520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.425857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.431429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   DRIBBLES    FG_Pct\n",
       "0         0  0.472363\n",
       "1         1  0.454049\n",
       "2         2  0.424520\n",
       "3         3  0.425857\n",
       "4         4  0.431429"
      ]
     },
     "execution_count": 39,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The average number of dribbles when player missed or made the shot. (group by, average)\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT DRIBBLES,\n",
    "  AVG(FGM) as FG_Pct \n",
    "  FROM combined_df \n",
    "  GROUP BY DRIBBLES''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "colab_type": "code",
    "id": "H3b74JTLEMDF",
    "outputId": "a98f5167-6cc4-43f2-b1b8-8378ba4552c0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['DRIBBLES'],df['FG_Pct'])\n",
    "plt.xlabel(\"Number of Dribbles\")\n",
    "plt.ylabel(\"Field Goal %\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 313
    },
    "colab_type": "code",
    "id": "wsiciZBeQtWQ",
    "outputId": "6b62dd19-d170-40be-bb46-9f5ff0ce0b85"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:856: RuntimeWarning: divide by zero encountered in log\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#revierd scatter plot using lognormal transformation because number of dribbles are skewed (as seen in earlier histogram)\n",
    "plt.scatter(np.log(df.DRIBBLES),df['FG_Pct'])\n",
    "plt.xlabel(\"Number of Dribbles\")\n",
    "plt.ylabel(\"Field Goal %\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "LIL1GuB5cE36"
   },
   "source": [
    "On average, players took about 0.25 more dribbles when they missed the shot than when they made the shot.\n",
    "\n",
    "However when reviewing the scatter plot there does not appear to be any correlation between the number of dribbles and the Field Goal %"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "_CAGBPkz-yIR",
    "outputId": "4301e459-9f65-47e7-d107-eb2ac9281d0a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Shot_Dist_Ft</th>\n",
       "      <th>FG_pct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.663918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.660341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.649905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>0.647447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.602420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Shot_Dist_Ft    FG_pct\n",
       "0           0.0  0.663918\n",
       "1           1.0  0.660341\n",
       "2           2.0  0.649905\n",
       "3           3.0  0.647447\n",
       "4           4.0  0.602420"
      ]
     },
     "execution_count": 42,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#compare distance to % FG Made\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT ROUND(SHOT_DIST,0) AS Shot_Dist_Ft,\n",
    "  AVG(FGM) as FG_pct \n",
    "  FROM combined_df \n",
    "  GROUP BY ROUND(SHOT_DIST,0)''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 280
    },
    "colab_type": "code",
    "id": "hOTpGHeTBP5m",
    "outputId": "ebb39ba8-9807-4a99-cd45-51fe6035253c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Shot_Dist_Ft'],df['FG_pct'])\n",
    "plt.xlabel(\"Shot Distance (Ft)\")\n",
    "plt.ylabel(\"Field Goal %\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "M2BjE0UyBxqq"
   },
   "outputs": [],
   "source": [
    "#as expected shot, field goal % decreases as shot distance increases.  However it is interesting to note \n",
    "#that there seems to be little difference between 10ft and 20ft. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "X5b24m8KLKBS",
    "outputId": "618230f3-acb0-4607-c723-e9ccadc5229e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Closest_Def</th>\n",
       "      <th>FG_pct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.453280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.455824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.455368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>0.473128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.454989</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Closest_Def    FG_pct\n",
       "0          0.0  0.453280\n",
       "1          1.0  0.455824\n",
       "2          2.0  0.455368\n",
       "3          3.0  0.473128\n",
       "4          4.0  0.454989"
      ]
     },
     "execution_count": 45,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#compare distance of defender to % FG Made\n",
    "conn = sqlite3.connect(\"nba_shot_data_2015.db\")\n",
    "try:\n",
    "  df = pd.read_sql_query('''\n",
    "  SELECT ROUND(CLOSE_DEF_DIST,0) AS Closest_Def,\n",
    "  AVG(FGM) as FG_pct \n",
    "  FROM combined_df \n",
    "  GROUP BY ROUND(CLOSE_DEF_DIST,0)''', conn)\n",
    "except Exception as e:\n",
    "  print(str(e))\n",
    "finally:\n",
    "  conn.close()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "colab_type": "code",
    "id": "IeXktKYsLpq3",
    "outputId": "8bdb2630-9750-4601-8009-4bcfdaad7d80"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Closest_Def'],df['FG_pct'])\n",
    "plt.xlabel(\"Closest Defender Distance (Ft)\")\n",
    "plt.ylabel(\"Field Goal %\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "pLjCMgtLMkx6"
   },
   "source": [
    "As expected, field goal % increases as there is a greater distance between the shooter and the defender.  At distances greater than 25ft the shot is almost 100%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "wC4yj8uPLWJ2",
    "outputId": "2f26abdc-fdf1-4f14-d519-5d039d9db82f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SHOT_NUMBER</th>\n",
       "      <th>DRIBBLES</th>\n",
       "      <th>TOUCH_TIME</th>\n",
       "      <th>SHOT_DIST</th>\n",
       "      <th>CLOSE_DEF_DIST</th>\n",
       "      <th>FGM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>7.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>28.2</td>\n",
       "      <td>6.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2.7</td>\n",
       "      <td>10.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2.7</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SHOT_NUMBER  DRIBBLES  TOUCH_TIME  SHOT_DIST  CLOSE_DEF_DIST  FGM\n",
       "0            1         2         1.9        7.7             1.3    1\n",
       "1            2         0         0.8       28.2             6.1    0\n",
       "2            3         3         2.7       10.1             0.9    0\n",
       "3            4         2         1.9       17.2             3.4    0\n",
       "4            5         2         2.7        3.7             1.1    0"
      ]
     },
     "execution_count": 47,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Response Variable: FGM\n",
    "#Predicting Variables: shot_number,dribbles,touch_time,shot_distance, closest defender distsance\n",
    "#The new dataset obtains features of interests. \n",
    "\n",
    "shots_new=DataFrame(shots,columns=['SHOT_NUMBER','DRIBBLES','TOUCH_TIME','SHOT_DIST','CLOSE_DEF_DIST','FGM'])\n",
    "shots_new.to_csv(r'sample_data/shot_new.csv')\n",
    "shots_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KmF4E77LOmb5"
   },
   "outputs": [],
   "source": [
    "!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n",
    "!wget -q https://www-us.apache.org/dist/spark/spark-2.4.4/spark-2.4.4-bin-hadoop2.7.tgz\n",
    "!tar xf spark-2.4.4-bin-hadoop2.7.tgz\n",
    "!pip install -q findspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jSCEWLO5NYWA"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n",
    "os.environ[\"SPARK_HOME\"] = \"/content/spark-2.4.4-bin-hadoop2.7\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "gwY1Zc6_kvnQ",
    "outputId": "ee5b8649-cb84-4c53-b046-412d00a245a9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pyspark.sql.session.SparkSession object at 0x7f4de7be3978>\n"
     ]
    }
   ],
   "source": [
    "import findspark\n",
    "findspark.init()\n",
    "from pyspark.sql import SparkSession\n",
    "spark=SparkSession.builder.master(\"local[*]\").getOrCreate()\n",
    "print(spark)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 612
    },
    "colab_type": "code",
    "id": "me4gcCkXMgwH",
    "outputId": "8493580b-146a-4508-9aa7-f307f93cf74c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+-----------+--------+----------+---------+--------------+---+\n",
      "|_c0|SHOT_NUMBER|DRIBBLES|TOUCH_TIME|SHOT_DIST|CLOSE_DEF_DIST|FGM|\n",
      "+---+-----------+--------+----------+---------+--------------+---+\n",
      "|  0|          1|       2|       1.9|      7.7|           1.3|  1|\n",
      "|  1|          2|       0|       0.8|     28.2|           6.1|  0|\n",
      "|  2|          3|       3|       2.7|     10.1|           0.9|  0|\n",
      "|  3|          4|       2|       1.9|     17.2|           3.4|  0|\n",
      "|  4|          5|       2|       2.7|      3.7|           1.1|  0|\n",
      "|  5|          6|       2|       4.4|     18.4|           2.6|  0|\n",
      "|  6|          7|      11|       9.0|     20.7|           6.1|  0|\n",
      "|  7|          8|       3|       2.5|      3.5|           2.1|  1|\n",
      "|  8|          9|       0|       0.8|     24.6|           7.3|  0|\n",
      "|  9|          1|       0|       1.1|     22.4|          19.8|  0|\n",
      "| 10|          2|       8|       7.5|     24.5|           4.7|  0|\n",
      "| 11|          3|      14|      11.9|     14.6|           1.8|  1|\n",
      "| 12|          4|       2|       2.9|      5.9|           5.4|  1|\n",
      "| 13|          1|       0|       0.8|     26.4|           4.4|  0|\n",
      "| 14|          1|       0|       0.5|     22.8|           5.3|  0|\n",
      "| 15|          2|       3|       2.7|     24.7|           5.6|  1|\n",
      "| 16|          3|       6|       5.1|     25.0|           5.4|  0|\n",
      "| 17|          4|       1|       0.9|     25.6|           5.1|  0|\n",
      "| 18|          5|       0|       1.2|     24.2|          11.1|  1|\n",
      "| 19|          1|       2|       2.2|     25.4|           3.5|  0|\n",
      "+---+-----------+--------+----------+---------+--------------+---+\n",
      "only showing top 20 rows\n",
      "\n",
      "root\n",
      " |-- _c0: integer (nullable = true)\n",
      " |-- SHOT_NUMBER: integer (nullable = true)\n",
      " |-- DRIBBLES: integer (nullable = true)\n",
      " |-- TOUCH_TIME: double (nullable = true)\n",
      " |-- SHOT_DIST: double (nullable = true)\n",
      " |-- CLOSE_DEF_DIST: double (nullable = true)\n",
      " |-- FGM: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.ml.feature import VectorAssembler\n",
    "from pyspark.ml.classification import LogisticRegression\n",
    "dataset=spark.read.csv('sample_data/shot_new.csv',inferSchema=True,header=True)\n",
    "dataset.show()\n",
    "dataset.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 459
    },
    "colab_type": "code",
    "id": "HsL9u5dUOX2K",
    "outputId": "fbcecade-fe94-4205-9689-3d1f419a77a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+-----------+--------+----------+---------+--------------+---+--------------------+\n",
      "|_c0|SHOT_NUMBER|DRIBBLES|TOUCH_TIME|SHOT_DIST|CLOSE_DEF_DIST|FGM|          Attributes|\n",
      "+---+-----------+--------+----------+---------+--------------+---+--------------------+\n",
      "|  0|          1|       2|       1.9|      7.7|           1.3|  1|[1.0,2.0,1.9,7.7,...|\n",
      "|  1|          2|       0|       0.8|     28.2|           6.1|  0|[2.0,0.0,0.8,28.2...|\n",
      "|  2|          3|       3|       2.7|     10.1|           0.9|  0|[3.0,3.0,2.7,10.1...|\n",
      "|  3|          4|       2|       1.9|     17.2|           3.4|  0|[4.0,2.0,1.9,17.2...|\n",
      "|  4|          5|       2|       2.7|      3.7|           1.1|  0|[5.0,2.0,2.7,3.7,...|\n",
      "|  5|          6|       2|       4.4|     18.4|           2.6|  0|[6.0,2.0,4.4,18.4...|\n",
      "|  6|          7|      11|       9.0|     20.7|           6.1|  0|[7.0,11.0,9.0,20....|\n",
      "|  7|          8|       3|       2.5|      3.5|           2.1|  1|[8.0,3.0,2.5,3.5,...|\n",
      "|  8|          9|       0|       0.8|     24.6|           7.3|  0|[9.0,0.0,0.8,24.6...|\n",
      "|  9|          1|       0|       1.1|     22.4|          19.8|  0|[1.0,0.0,1.1,22.4...|\n",
      "| 10|          2|       8|       7.5|     24.5|           4.7|  0|[2.0,8.0,7.5,24.5...|\n",
      "| 11|          3|      14|      11.9|     14.6|           1.8|  1|[3.0,14.0,11.9,14...|\n",
      "| 12|          4|       2|       2.9|      5.9|           5.4|  1|[4.0,2.0,2.9,5.9,...|\n",
      "| 13|          1|       0|       0.8|     26.4|           4.4|  0|[1.0,0.0,0.8,26.4...|\n",
      "| 14|          1|       0|       0.5|     22.8|           5.3|  0|[1.0,0.0,0.5,22.8...|\n",
      "| 15|          2|       3|       2.7|     24.7|           5.6|  1|[2.0,3.0,2.7,24.7...|\n",
      "| 16|          3|       6|       5.1|     25.0|           5.4|  0|[3.0,6.0,5.1,25.0...|\n",
      "| 17|          4|       1|       0.9|     25.6|           5.1|  0|[4.0,1.0,0.9,25.6...|\n",
      "| 18|          5|       0|       1.2|     24.2|          11.1|  1|[5.0,0.0,1.2,24.2...|\n",
      "| 19|          1|       2|       2.2|     25.4|           3.5|  0|[1.0,2.0,2.2,25.4...|\n",
      "+---+-----------+--------+----------+---------+--------------+---+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Combine into Assembler and tranasform the dataset,and check the output (without shot_clock)\n",
    "assembler= VectorAssembler(inputCols=['SHOT_NUMBER','DRIBBLES', 'TOUCH_TIME','SHOT_DIST','CLOSE_DEF_DIST','FGM'],outputCol='Attributes')\n",
    "output=assembler.transform(dataset)\n",
    "output.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 476
    },
    "colab_type": "code",
    "id": "JVJ7BL87PY0r",
    "outputId": "888d19e6-210b-4a18-bda4-21bfe3d21906"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+---+\n",
      "|          Attributes|FGM|\n",
      "+--------------------+---+\n",
      "|[1.0,2.0,1.9,7.7,...|  1|\n",
      "|[2.0,0.0,0.8,28.2...|  0|\n",
      "|[3.0,3.0,2.7,10.1...|  0|\n",
      "|[4.0,2.0,1.9,17.2...|  0|\n",
      "|[5.0,2.0,2.7,3.7,...|  0|\n",
      "|[6.0,2.0,4.4,18.4...|  0|\n",
      "|[7.0,11.0,9.0,20....|  0|\n",
      "|[8.0,3.0,2.5,3.5,...|  1|\n",
      "|[9.0,0.0,0.8,24.6...|  0|\n",
      "|[1.0,0.0,1.1,22.4...|  0|\n",
      "|[2.0,8.0,7.5,24.5...|  0|\n",
      "|[3.0,14.0,11.9,14...|  1|\n",
      "|[4.0,2.0,2.9,5.9,...|  1|\n",
      "|[1.0,0.0,0.8,26.4...|  0|\n",
      "|[1.0,0.0,0.5,22.8...|  0|\n",
      "|[2.0,3.0,2.7,24.7...|  1|\n",
      "|[3.0,6.0,5.1,25.0...|  0|\n",
      "|[4.0,1.0,0.9,25.6...|  0|\n",
      "|[5.0,0.0,1.2,24.2...|  1|\n",
      "|[1.0,2.0,2.2,25.4...|  0|\n",
      "+--------------------+---+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "124711"
      ]
     },
     "execution_count": 53,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finalized data in two attributes\n",
    "finalized_data=output.select('Attributes','FGM')\n",
    "finalized_data.show()\n",
    "finalized_data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "InXenxVSPnuH"
   },
   "outputs": [],
   "source": [
    "#Train_test_split and Logisitic Regressor\n",
    "train_data,test_data=finalized_data.randomSplit([0.7,0.3])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "61aUgUyyQAFE"
   },
   "outputs": [],
   "source": [
    "#Regressor to fit the train data\n",
    "lg=LogisticRegression(featuresCol='Attributes',labelCol='FGM',maxIter=10)\n",
    "regressor=lg.fit(train_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 459
    },
    "colab_type": "code",
    "id": "I0U8HtU4QXH8",
    "outputId": "7f5e82c7-e4e9-42ad-cc9d-4c656bedd230"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+---+--------------------+--------------------+----------+\n",
      "|          Attributes|FGM|       rawPrediction|         probability|prediction|\n",
      "+--------------------+---+--------------------+--------------------+----------+\n",
      "|[1.0,0.0,0.1,0.5,...|  1|[-12.545659115257...|[3.56031093516874...|       1.0|\n",
      "|[1.0,0.0,0.1,1.2,...|  0|[3.63384294037717...|[0.97426528916004...|       0.0|\n",
      "|[1.0,0.0,0.1,1.7,...|  0|[3.58653331856008...|[0.97305212790811...|       0.0|\n",
      "|[1.0,0.0,0.1,1.7,...|  0|[3.76145755348573...|[0.97727844445508...|       0.0|\n",
      "|[1.0,0.0,0.1,1.9,...|  0|[3.80296207682411...|[0.97818203515465...|       0.0|\n",
      "|[1.0,0.0,0.1,2.0,...|  1|[-12.719392387058...|[2.99251801470323...|       1.0|\n",
      "|[1.0,0.0,0.1,2.1,...|  0|[3.62183575571168...|[0.97396251928400...|       0.0|\n",
      "|[1.0,0.0,0.1,2.2,...|  0|[3.76185454119381...|[0.97728725801080...|       0.0|\n",
      "|[1.0,0.0,0.1,2.4,...|  0|[4.10550092485831...|[0.98378548313934...|       0.0|\n",
      "|[1.0,0.0,0.1,2.5,...|  0|[3.72074700556351...|[0.97635667209826...|       0.0|\n",
      "|[1.0,0.0,0.1,2.5,...|  1|[-12.416853539024...|[4.04974116496181...|       1.0|\n",
      "|[1.0,0.0,0.1,2.7,...|  0|[3.82586034160213...|[0.97866541467288...|       0.0|\n",
      "|[1.0,0.0,0.1,2.8,...|  1|[-12.44205887148,...|[3.94894216822593...|       1.0|\n",
      "|[1.0,0.0,0.1,2.9,...|  1|[-12.349746695523...|[4.33083139471464...|       1.0|\n",
      "|[1.0,0.0,0.1,3.0,...|  1|[-12.432358754491...|[3.98743360038396...|       1.0|\n",
      "|[1.0,0.0,0.1,3.2,...|  1|[-12.406756434328...|[4.09083879258166...|       1.0|\n",
      "|[1.0,0.0,0.1,3.3,...|  1|[-12.219031039321...|[4.93560166323378...|       1.0|\n",
      "|[1.0,0.0,0.1,3.4,...|  1|[-12.126718863364...|[5.41290697224346...|       1.0|\n",
      "|[1.0,0.0,0.1,4.6,...|  0|[3.91006035140315...|[0.98035439243337...|       0.0|\n",
      "|[1.0,0.0,0.1,6.4,...|  0|[4.36311207732392...|[0.98742155073250...|       0.0|\n",
      "+--------------------+---+--------------------+--------------------+----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Prediction and result\n",
    "pred=regressor.evaluate(test_data)\n",
    "pred.predictions.show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wtJMI2dKRBo5"
   },
   "outputs": [],
   "source": [
    "coeff=regressor.coefficients\n",
    "intercept=regressor.intercept\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "kNmGTpZlROgE",
    "outputId": "2cf6eaf4-e76d-49c8-c1f3-4763720fc14a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DenseVector([-0.1502, 0.058, -0.2402, -0.128, -0.159, 16.2966])"
      ]
     },
     "execution_count": 58,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeff\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "PAaXKgWbRUZR",
    "outputId": "5d3b382b-203c-4d6e-83e7-2698feee90ef"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.9879468558313693"
      ]
     },
     "execution_count": 59,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intercept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "colab_type": "code",
    "id": "B3x3QkABRYvb",
    "outputId": "4c9a6126-d0a9-4f79-b3ff-c4dc7f2246dc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9999554931353026"
      ]
     },
     "execution_count": 60,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using model's summary to build a roc curve\n",
    "summary=regressor.summary\n",
    "ROC=summary.roc.toPandas()\n",
    "##build ROC Curve\n",
    "plt.plot(ROC['FPR'],ROC['TPR'])\n",
    "#labels \n",
    "plt.xlabel('True Positive Value')\n",
    "plt.ylabel('False Positive Value')\n",
    "#AUC value(on top)\n",
    "summary.areaUnderROC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bwAcWq28DwbJ"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Copy of IAF 603 Group Project",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
